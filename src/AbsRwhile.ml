(* OCaml module generated by the BNF converter *)


type rIdent = RIdent of string
and atom = Atom of string
and program =
   Prog of macro list * rIdent * com * rIdent

and macro =
   Mac of rIdent * rIdent list * com

and com =
   CSeq of com * com
 | CMac of rIdent * rIdent list
 | CAss of rIdent * exp
 | CRep of pat * pat
 | CCond of exp * thenBranch * elseBranch * exp
 | CLoop of exp * doBranch * loopBranch * exp
 | CShow of exp

and thenBranch =
   BThen of com
 | BThenNone

and elseBranch =
   BElse of com
 | BElseNone

and doBranch =
   BDo of com
 | BDoNone

and loopBranch =
   BLoop of com
 | BLoopNone

and exp =
   ECons of exp * exp
 | EHd of exp
 | ETl of exp
 | EEq of exp * exp
 | EVar of variable
 | EVal of valT

and pat =
   PCons of pat * pat
 | PVar of variable
 | PVal of valT

and valT =
   VNil
 | VAtom of atom
 | VCons of valT * valT

and variable =
   Var of rIdent

